#!/usr/bin/env bash

RESOURCE_FILE_LIST_H="$1"
RESOURCE_FILE_DIR="$2"
PROJECT_ROOT_DIR="$3"
PROJECT_RESOURCE_FILE_LIST_FILE="$4"
BUILD_LOCK="$5"
IFS=$'\n'

if [ -f "$BUILD_LOCK" ]; then
    echo "Another process is already compiling the files. If you believe this is an error, delete $BUILD_LOCK"
    exit 0
fi

touch "$BUILD_LOCK"

# Initialize definitions
EXT_FILE_CONTENT_VEC_DEF=()
EXT_FILE_CNT_VEC_LEN_DEF=()
FILE_NAME_DEFINITION=()
FILE_CONTENT_VEC_DEF=()
FILE_CNT_VEC_LEN_DEF=()

function process_file_name() {
    echo "$1" | sed 's/\//_/g'
}

function generate_definition() {
    local BASENAME="$(echo $1 | sed 's/\./_/g')"
    local FILE_NAME="$2"
    FILE_NAME_DEFINITION+=("$FILE_NAME")
    EXT_FILE_CONTENT_VEC_DEF+=("extern unsigned char * ${BASENAME}; /* file content for $FILE_NAME */")
    EXT_FILE_CNT_VEC_LEN_DEF+=("extern unsigned int ${BASENAME}_len; /* file content length for $FILE_NAME */")
    FILE_CONTENT_VEC_DEF+=("${BASENAME},")
    FILE_CNT_VEC_LEN_DEF+=("${BASENAME}_len,")
}

function append_to_file() {
    local CONTENT_LIST=("$@")
    for CONTENT in "${CONTENT_LIST[@]}"; do
        [ -n "$CONTENT" ] && echo "$CONTENT" >> "$RESOURCE_FILE_LIST_H"
    done
}

echo '[xxdCompiler]: Initializing resource_file_list.h...'
> $RESOURCE_FILE_DIR/resource_file_cpp_code_list.txt

cd $PROJECT_ROOT_DIR

# Compile all resource files
FILELIST=$(cat $PROJECT_RESOURCE_FILE_LIST_FILE)
for FILE in $FILELIST; do
    BASENAME="$(process_file_name "$FILE")"
    xxd -i "$FILE" > "$RESOURCE_FILE_DIR/xxd_${BASENAME}.cpp"
    generate_definition "$BASENAME" "$FILE"
    echo "$RESOURCE_FILE_DIR/xxd_${BASENAME}.cpp" >> $RESOURCE_FILE_DIR/resource_file_cpp_code_list.txt
done

# Write the resource_file_list.h header
{
    echo "/******************************************************************************"
    echo ' *          This file is automatically generated by the build system.         *'
    echo ' *                 !!! YOUR MODIFICATION WILL NOT BE SAVED !!!                *'
    echo ' * !! DO NOT DIRECTLY MODIFY THIS FILE !! INSTEAD, MODIFY THE BUILD SCRIPT !! *'
    echo ' *****************************************************************************/'
    echo
    echo '#ifndef SYSDARFT_RESOURCE_FILE_LIST_H'
    echo '#define SYSDARFT_RESOURCE_FILE_LIST_H'
    echo
    echo "// Resource file content vector references:"
} > "$RESOURCE_FILE_LIST_H"

append_to_file "${EXT_FILE_CONTENT_VEC_DEF[@]}"
echo >> "$RESOURCE_FILE_LIST_H"
echo "// Resource file content length vector references:" >> "$RESOURCE_FILE_LIST_H"
append_to_file "${EXT_FILE_CNT_VEC_LEN_DEF[@]}"
echo >> "$RESOURCE_FILE_LIST_H"

# Append the resource file list and content vectors
{
    echo "// Resource file list:"
    echo 'static inline const char * resource_file_list[] = {'
    for FILENAME_DEF in "${FILE_NAME_DEFINITION[@]}"; do
        echo "    \"$FILENAME_DEF\","
    done
    echo '};'
    echo
    echo "// Resource file content vector:"
    echo 'static const inline unsigned char * resource_file_content_vector[] = {'
    for FILEVEC_DEF in "${FILE_CONTENT_VEC_DEF[@]}"; do
        echo "    $FILEVEC_DEF"
    done
    echo '};'
    echo
    echo "// Resource file content length vector:"
    echo 'static const inline unsigned int resource_file_content_length_vector[] = {'
    for FILEVEC_LEN_DEF in "${FILE_CNT_VEC_LEN_DEF[@]}"; do
        echo "    $FILEVEC_LEN_DEF"
    done
    echo '};'
    echo
    echo '#endif // SYSDARFT_RESOURCE_FILE_LIST_H'
} >> "$RESOURCE_FILE_LIST_H"

echo '[xxdCompiler]: Initialization for resource_file_list.h completed.'

rm "$BUILD_LOCK"
